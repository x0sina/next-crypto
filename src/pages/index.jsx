import Table from '@/components/Table';
import { useSocket } from '@/context/WebSocketProvider';
import http from '@/services/HttpService'
import Head from 'next/head'
import { useEffect, useState } from 'react';

export default function Home({ currencies }) {
  const socket = useSocket()
  const [coins, setCoins] = useState(currencies.cryptoCurrencyList)

  useEffect(() => {
    if (socket.sendJsonMessage) {
      if (socket.readyState === 1) {
        if (socket.lastJsonMessage !== null) {
          const updatedId = socket?.lastJsonMessage?.d?.cr?.id;
          const updatedData = socket?.lastJsonMessage?.d?.cr
          const index = coins.findIndex(c => c.id === updatedId)
          const updatedCoins = [...coins]
          if (+updatedData.p) updatedCoins[index].quotes[2].price = +updatedData.p
          if (+updatedData.mc) updatedCoins[index].quotes[2].fullyDilluttedMarketCap = +updatedData.mc
          if (+updatedData.p24h) updatedCoins[index].quotes[2].percentChange24h = +updatedData.p24h
          if (+updatedData.p7d) updatedCoins[index].quotes[2].percentChange7d = +updatedData.p7d
          if (+updatedData.v) updatedCoins[index].quotes[2].volume24h = +updatedData.v
          setCoins(updatedCoins)
        }
      }
      else {
        const currencyIds = currencies.cryptoCurrencyList.map(currency => currency.id)
        socket?.sendJsonMessage({
          method: "subscribe",
          id: "price",
          data: {
            cryptoIds: currencyIds
          }
        })
      }
    }
  }, [socket])


  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <Table currencies={coins} />
      </main>
    </>
  )
}

export const getServerSideProps = async (ctx) => {
  const { data } = await http.get('/data-api/v3/cryptocurrency/listing?&aux=ath,atl,high24h,low24h,num_market_pairs,cmc_rank,date_added,max_supply,circulating_supply,total_supply,volume_7d,volume_30d,self_reported_circulating_supply,self_reported_market_cap&convert=USD,BTC,ETH&cryptoType=all&tagType=all&start=1&limit=100')
  return {
    props: {
      currencies: data.data
    }
  }
}
